(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{282:function(a,e,r){"use strict";r.r(e);var o=r(14),i=Object(o.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"caracteristicas-javabean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#caracteristicas-javabean"}},[a._v("#")]),a._v(" Características JavaBean")]),a._v(" "),e("h2",{attrs:{id:"persistencia"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#persistencia"}},[a._v("#")]),a._v(" Persistencia")]),a._v(" "),e("p",[a._v("A persistencia é a característica dunha clase que permite almacenar o estado para que\nperdure a través do tempo. Para implementala, é necesario que poida ser almacenada nun\narquivo e recuperada posteriormente.")]),a._v(" "),e("p",[a._v("O mecanismo que implementa a persistencia chámase serialización.")]),a._v(" "),e("p",[a._v("Para que a serialización sexa automática, o compoñente debe implementar a interface\nSerializable, que proporciona serialización automática mediante a utilización das\nferramentas de Java Object Serialization.")]),a._v(" "),e("p",[a._v("Para poder usar a interface serializable, hai que ter en conta o seguinte:")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("As clases que implementan Serializable deben ter un construtor sen argumentos.")])]),a._v(" "),e("li",[e("p",[a._v("Todos os campos, exepto static e transient son serializados.")])])]),a._v(" "),e("h2",{attrs:{id:"propiedades"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#propiedades"}},[a._v("#")]),a._v(" Propiedades")]),a._v(" "),e("p",[a._v("Unha propiedade é un atributo do JavaBean que afecta á súa aparencia ou á súa conduta.")]),a._v(" "),e("p",[a._v("Un compoñente ten definido o seu estado a partir dun conxunto de propiedades, normalmente privadas. As propiedades son variables definidas por un nome e un tipo de datos e toman valores concretos.")]),a._v(" "),e("p",[a._v("As propiedades dun Bean poden examinarse e modificarse mediante métodos ou funcións\nmembro que acceden a dita propiedade. Estes métodos poden ser de dous tipos: getters e\nsetters.")]),a._v(" "),e("ul",[e("li",[a._v("get: le o valor da propiedade.")]),a._v(" "),e("li",[a._v("set: cambia o valor da propiedade.")])]),a._v(" "),e("p",[a._v("Ademais, asociarase un editor de propiedades para cada tipo de propiedade, que permitirá á persoa programadora modificalas facilmente no momento de deseño.")]),a._v(" "),e("h3",{attrs:{id:"modificar-graficamente-unha-propiedade-dun-componente"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#modificar-graficamente-unha-propiedade-dun-componente"}},[a._v("#")]),a._v(" Modificar graficamente unha propiedade dun compoñente")]),a._v(" "),e("p",[a._v("Unha vez instalado o compoñente no IDE, este debe ser capaz de identificar as súas\npropiedades simplemente detectando parellas de operacións get/set, mediante a\ncapacidade denominada introspección.")]),a._v(" "),e("p",[a._v("O IDE invoca os métodos get para mostrar o valor das propiedades. E cada vez que se\ncambia o valor dunha propiedade, chámase ao método set apropiado para actualizar dito\nvalor.")]),a._v(" "),e("p",[a._v("O IDE poderá editar automaticamente calquera propiedade dos tipos básicos ou das clases\nColor e Font. Non será posible editar propiedades de tipos máis complexos. Para poder\nfacelo, haberá que crear un editor de propiedades personalizado.")]),a._v(" "),e("p",[a._v("Un editor de propiedades é unha ferramenta para modificar a configuración dun tipo de\npropiedade particular.A creación dun editor de propiedades usando Java supón programar unha clase que implemente a interface "),e("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/15/docs/api/java.desktop/java/beans/PropertyEditor.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("PropertyEditor"),e("OutboundLink")],1),a._v(", que proporciona métodos para especificar como se debe mostrar unha propiedade na folla de propiedades")])])}),[],!1,null,null,null);e.default=i.exports}}]);